/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AuthImport } from './routes/auth'
import { Route as VideosVideoidImport } from './routes/videos/$videoid'
import { Route as ArticleArticleidImport } from './routes/article/$articleid'
import { Route as AdminEditNewsNewsidImport } from './routes/admin/edit/news/$newsid'

// Create Virtual Routes

const SpecialistLazyImport = createFileRoute('/specialist')()
const ChatLazyImport = createFileRoute('/chat')()
const AutismLazyImport = createFileRoute('/autism')()
const IndexLazyImport = createFileRoute('/')()
const AdminIndexLazyImport = createFileRoute('/admin/')()
const AdminNewSpecialistIndexLazyImport = createFileRoute(
  '/admin/new/specialist/',
)()
const AdminNewNewsIndexLazyImport = createFileRoute('/admin/new/news/')()

// Create/Update Routes

const SpecialistLazyRoute = SpecialistLazyImport.update({
  id: '/specialist',
  path: '/specialist',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/specialist.lazy').then((d) => d.Route))

const ChatLazyRoute = ChatLazyImport.update({
  id: '/chat',
  path: '/chat',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/chat.lazy').then((d) => d.Route))

const AutismLazyRoute = AutismLazyImport.update({
  id: '/autism',
  path: '/autism',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/autism.lazy').then((d) => d.Route))

const AuthRoute = AuthImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const AdminIndexLazyRoute = AdminIndexLazyImport.update({
  id: '/admin/',
  path: '/admin/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/admin/index.lazy').then((d) => d.Route))

const VideosVideoidRoute = VideosVideoidImport.update({
  id: '/videos/$videoid',
  path: '/videos/$videoid',
  getParentRoute: () => rootRoute,
} as any)

const ArticleArticleidRoute = ArticleArticleidImport.update({
  id: '/article/$articleid',
  path: '/article/$articleid',
  getParentRoute: () => rootRoute,
} as any)

const AdminNewSpecialistIndexLazyRoute =
  AdminNewSpecialistIndexLazyImport.update({
    id: '/admin/new/specialist/',
    path: '/admin/new/specialist/',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/admin/new/specialist/index.lazy').then((d) => d.Route),
  )

const AdminNewNewsIndexLazyRoute = AdminNewNewsIndexLazyImport.update({
  id: '/admin/new/news/',
  path: '/admin/new/news/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/admin/new/news/index.lazy').then((d) => d.Route),
)

const AdminEditNewsNewsidRoute = AdminEditNewsNewsidImport.update({
  id: '/admin/edit/news/$newsid',
  path: '/admin/edit/news/$newsid',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/autism': {
      id: '/autism'
      path: '/autism'
      fullPath: '/autism'
      preLoaderRoute: typeof AutismLazyImport
      parentRoute: typeof rootRoute
    }
    '/chat': {
      id: '/chat'
      path: '/chat'
      fullPath: '/chat'
      preLoaderRoute: typeof ChatLazyImport
      parentRoute: typeof rootRoute
    }
    '/specialist': {
      id: '/specialist'
      path: '/specialist'
      fullPath: '/specialist'
      preLoaderRoute: typeof SpecialistLazyImport
      parentRoute: typeof rootRoute
    }
    '/article/$articleid': {
      id: '/article/$articleid'
      path: '/article/$articleid'
      fullPath: '/article/$articleid'
      preLoaderRoute: typeof ArticleArticleidImport
      parentRoute: typeof rootRoute
    }
    '/videos/$videoid': {
      id: '/videos/$videoid'
      path: '/videos/$videoid'
      fullPath: '/videos/$videoid'
      preLoaderRoute: typeof VideosVideoidImport
      parentRoute: typeof rootRoute
    }
    '/admin/': {
      id: '/admin/'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/admin/edit/news/$newsid': {
      id: '/admin/edit/news/$newsid'
      path: '/admin/edit/news/$newsid'
      fullPath: '/admin/edit/news/$newsid'
      preLoaderRoute: typeof AdminEditNewsNewsidImport
      parentRoute: typeof rootRoute
    }
    '/admin/new/news/': {
      id: '/admin/new/news/'
      path: '/admin/new/news'
      fullPath: '/admin/new/news'
      preLoaderRoute: typeof AdminNewNewsIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/admin/new/specialist/': {
      id: '/admin/new/specialist/'
      path: '/admin/new/specialist'
      fullPath: '/admin/new/specialist'
      preLoaderRoute: typeof AdminNewSpecialistIndexLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/auth': typeof AuthRoute
  '/autism': typeof AutismLazyRoute
  '/chat': typeof ChatLazyRoute
  '/specialist': typeof SpecialistLazyRoute
  '/article/$articleid': typeof ArticleArticleidRoute
  '/videos/$videoid': typeof VideosVideoidRoute
  '/admin': typeof AdminIndexLazyRoute
  '/admin/edit/news/$newsid': typeof AdminEditNewsNewsidRoute
  '/admin/new/news': typeof AdminNewNewsIndexLazyRoute
  '/admin/new/specialist': typeof AdminNewSpecialistIndexLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/auth': typeof AuthRoute
  '/autism': typeof AutismLazyRoute
  '/chat': typeof ChatLazyRoute
  '/specialist': typeof SpecialistLazyRoute
  '/article/$articleid': typeof ArticleArticleidRoute
  '/videos/$videoid': typeof VideosVideoidRoute
  '/admin': typeof AdminIndexLazyRoute
  '/admin/edit/news/$newsid': typeof AdminEditNewsNewsidRoute
  '/admin/new/news': typeof AdminNewNewsIndexLazyRoute
  '/admin/new/specialist': typeof AdminNewSpecialistIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/auth': typeof AuthRoute
  '/autism': typeof AutismLazyRoute
  '/chat': typeof ChatLazyRoute
  '/specialist': typeof SpecialistLazyRoute
  '/article/$articleid': typeof ArticleArticleidRoute
  '/videos/$videoid': typeof VideosVideoidRoute
  '/admin/': typeof AdminIndexLazyRoute
  '/admin/edit/news/$newsid': typeof AdminEditNewsNewsidRoute
  '/admin/new/news/': typeof AdminNewNewsIndexLazyRoute
  '/admin/new/specialist/': typeof AdminNewSpecialistIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/auth'
    | '/autism'
    | '/chat'
    | '/specialist'
    | '/article/$articleid'
    | '/videos/$videoid'
    | '/admin'
    | '/admin/edit/news/$newsid'
    | '/admin/new/news'
    | '/admin/new/specialist'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/auth'
    | '/autism'
    | '/chat'
    | '/specialist'
    | '/article/$articleid'
    | '/videos/$videoid'
    | '/admin'
    | '/admin/edit/news/$newsid'
    | '/admin/new/news'
    | '/admin/new/specialist'
  id:
    | '__root__'
    | '/'
    | '/auth'
    | '/autism'
    | '/chat'
    | '/specialist'
    | '/article/$articleid'
    | '/videos/$videoid'
    | '/admin/'
    | '/admin/edit/news/$newsid'
    | '/admin/new/news/'
    | '/admin/new/specialist/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  AuthRoute: typeof AuthRoute
  AutismLazyRoute: typeof AutismLazyRoute
  ChatLazyRoute: typeof ChatLazyRoute
  SpecialistLazyRoute: typeof SpecialistLazyRoute
  ArticleArticleidRoute: typeof ArticleArticleidRoute
  VideosVideoidRoute: typeof VideosVideoidRoute
  AdminIndexLazyRoute: typeof AdminIndexLazyRoute
  AdminEditNewsNewsidRoute: typeof AdminEditNewsNewsidRoute
  AdminNewNewsIndexLazyRoute: typeof AdminNewNewsIndexLazyRoute
  AdminNewSpecialistIndexLazyRoute: typeof AdminNewSpecialistIndexLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  AuthRoute: AuthRoute,
  AutismLazyRoute: AutismLazyRoute,
  ChatLazyRoute: ChatLazyRoute,
  SpecialistLazyRoute: SpecialistLazyRoute,
  ArticleArticleidRoute: ArticleArticleidRoute,
  VideosVideoidRoute: VideosVideoidRoute,
  AdminIndexLazyRoute: AdminIndexLazyRoute,
  AdminEditNewsNewsidRoute: AdminEditNewsNewsidRoute,
  AdminNewNewsIndexLazyRoute: AdminNewNewsIndexLazyRoute,
  AdminNewSpecialistIndexLazyRoute: AdminNewSpecialistIndexLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/auth",
        "/autism",
        "/chat",
        "/specialist",
        "/article/$articleid",
        "/videos/$videoid",
        "/admin/",
        "/admin/edit/news/$newsid",
        "/admin/new/news/",
        "/admin/new/specialist/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/auth": {
      "filePath": "auth.tsx"
    },
    "/autism": {
      "filePath": "autism.lazy.tsx"
    },
    "/chat": {
      "filePath": "chat.lazy.tsx"
    },
    "/specialist": {
      "filePath": "specialist.lazy.tsx"
    },
    "/article/$articleid": {
      "filePath": "article/$articleid.tsx"
    },
    "/videos/$videoid": {
      "filePath": "videos/$videoid.tsx"
    },
    "/admin/": {
      "filePath": "admin/index.lazy.tsx"
    },
    "/admin/edit/news/$newsid": {
      "filePath": "admin/edit/news/$newsid.tsx"
    },
    "/admin/new/news/": {
      "filePath": "admin/new/news/index.lazy.tsx"
    },
    "/admin/new/specialist/": {
      "filePath": "admin/new/specialist/index.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
