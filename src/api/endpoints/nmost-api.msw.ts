/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OpenAPI spec version: 0.0.1
 */
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'
import type {
  AiV1ChatResponse,
  AuthV1LoginResponse,
  AuthV1TokenResponse,
  CategoryV1Category,
  CategoryV1GetCategoryFeedResponse,
  MediaV1GetMediaFeedResponse,
  MediaV1Media,
  NewsV1GetNewsFeedResponse,
  NewsV1News,
  TagsV1GetTagsFeedResponse,
  TagsV1Tags
} from '../model'

export const getAIServiceChatResponseMock = (overrideResponse: Partial< AiV1ChatResponse > = {}): AiV1ChatResponse => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ...overrideResponse})

export const getCategoryServiceGetCategoryFeedResponseMock = (overrideResponse: Partial< CategoryV1GetCategoryFeedResponse > = {}): CategoryV1GetCategoryFeedResponse => ({category: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), tag: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined])})), undefined])})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getCategoryServiceGetCategoryByIdResponseMock = (overrideResponse: Partial< CategoryV1Category > = {}): CategoryV1Category => ({id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), tag: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined])})), undefined]), ...overrideResponse})

export const getAuthServiceLoginResponseMock = (overrideResponse: Partial< AuthV1LoginResponse > = {}): AuthV1LoginResponse => ({token: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ...overrideResponse})

export const getMediaServiceGetMediaFeedResponseMock = (overrideResponse: Partial< MediaV1GetMediaFeedResponse > = {}): MediaV1GetMediaFeedResponse => ({media: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), shortDescription: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), thumbnailUrl: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), title: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), videoUrl: faker.helpers.arrayElement([faker.string.alpha(20), undefined])})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getMediaServiceGetMediaByIdResponseMock = (overrideResponse: Partial< MediaV1Media > = {}): MediaV1Media => ({description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), thumbnailUrl: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), title: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), videoUrl: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ...overrideResponse})

export const getNewsServiceGetNewsFeedResponseMock = (overrideResponse: Partial< NewsV1GetNewsFeedResponse > = {}): NewsV1GetNewsFeedResponse => ({news: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), imageUrl: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), shortBody: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), title: faker.helpers.arrayElement([faker.string.alpha(20), undefined])})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getNewsServiceGetNewsByIdResponseMock = (overrideResponse: Partial< NewsV1News > = {}): NewsV1News => ({body: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), imageUrl: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), title: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ...overrideResponse})

export const getTagsServiceGetTagsFeedResponseMock = (overrideResponse: Partial< TagsV1GetTagsFeedResponse > = {}): TagsV1GetTagsFeedResponse => ({tags: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined])})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getTagsServiceGetTagsByIdResponseMock = (overrideResponse: Partial< TagsV1Tags > = {}): TagsV1Tags => ({id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ...overrideResponse})

export const getAuthServiceTokenResponseMock = (overrideResponse: Partial< AuthV1TokenResponse > = {}): AuthV1TokenResponse => ({username: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ...overrideResponse})


export const getAIServiceChatMockHandler = (overrideResponse?: AiV1ChatResponse | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<AiV1ChatResponse> | AiV1ChatResponse)) => {
  return http.post('*/v1/ai/chat', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAIServiceChatResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCategoryServiceGetCategoryFeedMockHandler = (overrideResponse?: CategoryV1GetCategoryFeedResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<CategoryV1GetCategoryFeedResponse> | CategoryV1GetCategoryFeedResponse)) => {
  return http.get('*/v1/category', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCategoryServiceGetCategoryFeedResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCategoryServiceCreateCategoryMockHandler = (overrideResponse?: unknown | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<unknown> | unknown)) => {
  return http.post('*/v1/category', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getCategoryServiceGetCategoryByIdMockHandler = (overrideResponse?: CategoryV1Category | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<CategoryV1Category> | CategoryV1Category)) => {
  return http.get('*/v1/category/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCategoryServiceGetCategoryByIdResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCategoryServiceUpdateCategoryMockHandler = (overrideResponse?: unknown | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<unknown> | unknown)) => {
  return http.put('*/v1/category/:id', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getCategoryServiceDeleteCategoryMockHandler = (overrideResponse?: unknown | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<unknown> | unknown)) => {
  return http.delete('*/v1/category/:id', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getAuthServiceLoginMockHandler = (overrideResponse?: AuthV1LoginResponse | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<AuthV1LoginResponse> | AuthV1LoginResponse)) => {
  return http.post('*/v1/login', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAuthServiceLoginResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getMediaServiceGetMediaFeedMockHandler = (overrideResponse?: MediaV1GetMediaFeedResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<MediaV1GetMediaFeedResponse> | MediaV1GetMediaFeedResponse)) => {
  return http.get('*/v1/media', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getMediaServiceGetMediaFeedResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getMediaServiceCreateMediaMockHandler = (overrideResponse?: unknown | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<unknown> | unknown)) => {
  return http.post('*/v1/media', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getMediaServiceGetMediaByIdMockHandler = (overrideResponse?: MediaV1Media | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<MediaV1Media> | MediaV1Media)) => {
  return http.get('*/v1/media/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getMediaServiceGetMediaByIdResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getMediaServiceUpdateMediaMockHandler = (overrideResponse?: unknown | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<unknown> | unknown)) => {
  return http.put('*/v1/media/:id', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getMediaServiceDeleteMediaMockHandler = (overrideResponse?: unknown | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<unknown> | unknown)) => {
  return http.delete('*/v1/media/:id', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getNewsServiceGetNewsFeedMockHandler = (overrideResponse?: NewsV1GetNewsFeedResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<NewsV1GetNewsFeedResponse> | NewsV1GetNewsFeedResponse)) => {
  return http.get('*/v1/news', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getNewsServiceGetNewsFeedResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getNewsServiceCreateNewsMockHandler = (overrideResponse?: unknown | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<unknown> | unknown)) => {
  return http.post('*/v1/news', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getNewsServiceGetNewsByIdMockHandler = (overrideResponse?: NewsV1News | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<NewsV1News> | NewsV1News)) => {
  return http.get('*/v1/news/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getNewsServiceGetNewsByIdResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getNewsServiceUpdateNewsMockHandler = (overrideResponse?: unknown | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<unknown> | unknown)) => {
  return http.put('*/v1/news/:id', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getNewsServiceDeleteNewsMockHandler = (overrideResponse?: unknown | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<unknown> | unknown)) => {
  return http.delete('*/v1/news/:id', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getTagsServiceGetTagsFeedMockHandler = (overrideResponse?: TagsV1GetTagsFeedResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<TagsV1GetTagsFeedResponse> | TagsV1GetTagsFeedResponse)) => {
  return http.get('*/v1/tags', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getTagsServiceGetTagsFeedResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getTagsServiceCreateTagsMockHandler = (overrideResponse?: unknown | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<unknown> | unknown)) => {
  return http.post('*/v1/tags', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getTagsServiceGetTagsByIdMockHandler = (overrideResponse?: TagsV1Tags | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<TagsV1Tags> | TagsV1Tags)) => {
  return http.get('*/v1/tags/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getTagsServiceGetTagsByIdResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getTagsServiceUpdateTagsMockHandler = (overrideResponse?: unknown | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<unknown> | unknown)) => {
  return http.put('*/v1/tags/:id', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getTagsServiceDeleteTagsMockHandler = (overrideResponse?: unknown | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<unknown> | unknown)) => {
  return http.delete('*/v1/tags/:id', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getAuthServiceTokenMockHandler = (overrideResponse?: AuthV1TokenResponse | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<AuthV1TokenResponse> | AuthV1TokenResponse)) => {
  return http.post('*/v1/token', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAuthServiceTokenResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getMock = () => [
  getAIServiceChatMockHandler(),
  getCategoryServiceGetCategoryFeedMockHandler(),
  getCategoryServiceCreateCategoryMockHandler(),
  getCategoryServiceGetCategoryByIdMockHandler(),
  getCategoryServiceUpdateCategoryMockHandler(),
  getCategoryServiceDeleteCategoryMockHandler(),
  getAuthServiceLoginMockHandler(),
  getMediaServiceGetMediaFeedMockHandler(),
  getMediaServiceCreateMediaMockHandler(),
  getMediaServiceGetMediaByIdMockHandler(),
  getMediaServiceUpdateMediaMockHandler(),
  getMediaServiceDeleteMediaMockHandler(),
  getNewsServiceGetNewsFeedMockHandler(),
  getNewsServiceCreateNewsMockHandler(),
  getNewsServiceGetNewsByIdMockHandler(),
  getNewsServiceUpdateNewsMockHandler(),
  getNewsServiceDeleteNewsMockHandler(),
  getTagsServiceGetTagsFeedMockHandler(),
  getTagsServiceCreateTagsMockHandler(),
  getTagsServiceGetTagsByIdMockHandler(),
  getTagsServiceUpdateTagsMockHandler(),
  getTagsServiceDeleteTagsMockHandler(),
  getAuthServiceTokenMockHandler()
]
