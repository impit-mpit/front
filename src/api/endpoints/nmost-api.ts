/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * OpenAPI spec version: 0.0.1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  AiV1ChatResponse,
  AiV1CreateChatRequest,
  MediaServiceGetMediaFeedParams,
  MediaV1CreateMediaRequest,
  MediaV1GetMediaFeedResponse,
  MediaV1Media,
  MediaV1UpdateMediaRequest,
  NewsServiceGetNewsFeedParams,
  NewsV1CreateNewsRequest,
  NewsV1GetNewsFeedResponse,
  NewsV1News,
  NewsV1UpdateNewsRequest
} from '../model'
import { requestInstance } from './axios-instance';
import type { ErrorType } from './axios-instance';



export const aIServiceChat = (
    aiV1CreateChatRequest: AiV1CreateChatRequest,
 signal?: AbortSignal
) => {
      
      
      return requestInstance<AiV1ChatResponse>(
      {url: `/v1/ai/chat`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: aiV1CreateChatRequest, signal
    },
      );
    }
  


export const getAIServiceChatMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof aIServiceChat>>, TError,{data: AiV1CreateChatRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof aIServiceChat>>, TError,{data: AiV1CreateChatRequest}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof aIServiceChat>>, {data: AiV1CreateChatRequest}> = (props) => {
          const {data} = props ?? {};

          return  aIServiceChat(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AIServiceChatMutationResult = NonNullable<Awaited<ReturnType<typeof aIServiceChat>>>
    export type AIServiceChatMutationBody = AiV1CreateChatRequest
    export type AIServiceChatMutationError = ErrorType<unknown>

    export const useAIServiceChat = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof aIServiceChat>>, TError,{data: AiV1CreateChatRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof aIServiceChat>>,
        TError,
        {data: AiV1CreateChatRequest},
        TContext
      > => {

      const mutationOptions = getAIServiceChatMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const mediaServiceGetMediaFeed = (
    params?: MediaServiceGetMediaFeedParams,
 signal?: AbortSignal
) => {
      
      
      return requestInstance<MediaV1GetMediaFeedResponse>(
      {url: `/v1/media`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getMediaServiceGetMediaFeedQueryKey = (params?: MediaServiceGetMediaFeedParams,) => {
    return [`/v1/media`, ...(params ? [params]: [])] as const;
    }

    
export const getMediaServiceGetMediaFeedQueryOptions = <TData = Awaited<ReturnType<typeof mediaServiceGetMediaFeed>>, TError = ErrorType<unknown>>(params?: MediaServiceGetMediaFeedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof mediaServiceGetMediaFeed>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getMediaServiceGetMediaFeedQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof mediaServiceGetMediaFeed>>> = ({ signal }) => mediaServiceGetMediaFeed(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof mediaServiceGetMediaFeed>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type MediaServiceGetMediaFeedQueryResult = NonNullable<Awaited<ReturnType<typeof mediaServiceGetMediaFeed>>>
export type MediaServiceGetMediaFeedQueryError = ErrorType<unknown>


export function useMediaServiceGetMediaFeed<TData = Awaited<ReturnType<typeof mediaServiceGetMediaFeed>>, TError = ErrorType<unknown>>(
 params: undefined |  MediaServiceGetMediaFeedParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof mediaServiceGetMediaFeed>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof mediaServiceGetMediaFeed>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useMediaServiceGetMediaFeed<TData = Awaited<ReturnType<typeof mediaServiceGetMediaFeed>>, TError = ErrorType<unknown>>(
 params?: MediaServiceGetMediaFeedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof mediaServiceGetMediaFeed>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof mediaServiceGetMediaFeed>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useMediaServiceGetMediaFeed<TData = Awaited<ReturnType<typeof mediaServiceGetMediaFeed>>, TError = ErrorType<unknown>>(
 params?: MediaServiceGetMediaFeedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof mediaServiceGetMediaFeed>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useMediaServiceGetMediaFeed<TData = Awaited<ReturnType<typeof mediaServiceGetMediaFeed>>, TError = ErrorType<unknown>>(
 params?: MediaServiceGetMediaFeedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof mediaServiceGetMediaFeed>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getMediaServiceGetMediaFeedQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const mediaServiceCreateMedia = (
    mediaV1CreateMediaRequest: MediaV1CreateMediaRequest,
 signal?: AbortSignal
) => {
      
      
      return requestInstance<unknown>(
      {url: `/v1/media`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: mediaV1CreateMediaRequest, signal
    },
      );
    }
  


export const getMediaServiceCreateMediaMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof mediaServiceCreateMedia>>, TError,{data: MediaV1CreateMediaRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof mediaServiceCreateMedia>>, TError,{data: MediaV1CreateMediaRequest}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof mediaServiceCreateMedia>>, {data: MediaV1CreateMediaRequest}> = (props) => {
          const {data} = props ?? {};

          return  mediaServiceCreateMedia(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type MediaServiceCreateMediaMutationResult = NonNullable<Awaited<ReturnType<typeof mediaServiceCreateMedia>>>
    export type MediaServiceCreateMediaMutationBody = MediaV1CreateMediaRequest
    export type MediaServiceCreateMediaMutationError = ErrorType<unknown>

    export const useMediaServiceCreateMedia = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof mediaServiceCreateMedia>>, TError,{data: MediaV1CreateMediaRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof mediaServiceCreateMedia>>,
        TError,
        {data: MediaV1CreateMediaRequest},
        TContext
      > => {

      const mutationOptions = getMediaServiceCreateMediaMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const mediaServiceGetMediaById = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return requestInstance<MediaV1Media>(
      {url: `/v1/media/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getMediaServiceGetMediaByIdQueryKey = (id: string,) => {
    return [`/v1/media/${id}`] as const;
    }

    
export const getMediaServiceGetMediaByIdQueryOptions = <TData = Awaited<ReturnType<typeof mediaServiceGetMediaById>>, TError = ErrorType<unknown>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof mediaServiceGetMediaById>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getMediaServiceGetMediaByIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof mediaServiceGetMediaById>>> = ({ signal }) => mediaServiceGetMediaById(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof mediaServiceGetMediaById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type MediaServiceGetMediaByIdQueryResult = NonNullable<Awaited<ReturnType<typeof mediaServiceGetMediaById>>>
export type MediaServiceGetMediaByIdQueryError = ErrorType<unknown>


export function useMediaServiceGetMediaById<TData = Awaited<ReturnType<typeof mediaServiceGetMediaById>>, TError = ErrorType<unknown>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof mediaServiceGetMediaById>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof mediaServiceGetMediaById>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useMediaServiceGetMediaById<TData = Awaited<ReturnType<typeof mediaServiceGetMediaById>>, TError = ErrorType<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof mediaServiceGetMediaById>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof mediaServiceGetMediaById>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useMediaServiceGetMediaById<TData = Awaited<ReturnType<typeof mediaServiceGetMediaById>>, TError = ErrorType<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof mediaServiceGetMediaById>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useMediaServiceGetMediaById<TData = Awaited<ReturnType<typeof mediaServiceGetMediaById>>, TError = ErrorType<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof mediaServiceGetMediaById>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getMediaServiceGetMediaByIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const mediaServiceUpdateMedia = (
    id: string,
    mediaV1UpdateMediaRequest: MediaV1UpdateMediaRequest,
 ) => {
      
      
      return requestInstance<unknown>(
      {url: `/v1/media/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: mediaV1UpdateMediaRequest
    },
      );
    }
  


export const getMediaServiceUpdateMediaMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof mediaServiceUpdateMedia>>, TError,{id: string;data: MediaV1UpdateMediaRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof mediaServiceUpdateMedia>>, TError,{id: string;data: MediaV1UpdateMediaRequest}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof mediaServiceUpdateMedia>>, {id: string;data: MediaV1UpdateMediaRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  mediaServiceUpdateMedia(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type MediaServiceUpdateMediaMutationResult = NonNullable<Awaited<ReturnType<typeof mediaServiceUpdateMedia>>>
    export type MediaServiceUpdateMediaMutationBody = MediaV1UpdateMediaRequest
    export type MediaServiceUpdateMediaMutationError = ErrorType<unknown>

    export const useMediaServiceUpdateMedia = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof mediaServiceUpdateMedia>>, TError,{id: string;data: MediaV1UpdateMediaRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof mediaServiceUpdateMedia>>,
        TError,
        {id: string;data: MediaV1UpdateMediaRequest},
        TContext
      > => {

      const mutationOptions = getMediaServiceUpdateMediaMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const mediaServiceDeleteMedia = (
    id: string,
 ) => {
      
      
      return requestInstance<unknown>(
      {url: `/v1/media/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getMediaServiceDeleteMediaMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof mediaServiceDeleteMedia>>, TError,{id: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof mediaServiceDeleteMedia>>, TError,{id: string}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof mediaServiceDeleteMedia>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  mediaServiceDeleteMedia(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type MediaServiceDeleteMediaMutationResult = NonNullable<Awaited<ReturnType<typeof mediaServiceDeleteMedia>>>
    
    export type MediaServiceDeleteMediaMutationError = ErrorType<unknown>

    export const useMediaServiceDeleteMedia = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof mediaServiceDeleteMedia>>, TError,{id: string}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof mediaServiceDeleteMedia>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getMediaServiceDeleteMediaMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const newsServiceGetNewsFeed = (
    params?: NewsServiceGetNewsFeedParams,
 signal?: AbortSignal
) => {
      
      
      return requestInstance<NewsV1GetNewsFeedResponse>(
      {url: `/v1/news`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getNewsServiceGetNewsFeedQueryKey = (params?: NewsServiceGetNewsFeedParams,) => {
    return [`/v1/news`, ...(params ? [params]: [])] as const;
    }

    
export const getNewsServiceGetNewsFeedQueryOptions = <TData = Awaited<ReturnType<typeof newsServiceGetNewsFeed>>, TError = ErrorType<unknown>>(params?: NewsServiceGetNewsFeedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof newsServiceGetNewsFeed>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getNewsServiceGetNewsFeedQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof newsServiceGetNewsFeed>>> = ({ signal }) => newsServiceGetNewsFeed(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof newsServiceGetNewsFeed>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type NewsServiceGetNewsFeedQueryResult = NonNullable<Awaited<ReturnType<typeof newsServiceGetNewsFeed>>>
export type NewsServiceGetNewsFeedQueryError = ErrorType<unknown>


export function useNewsServiceGetNewsFeed<TData = Awaited<ReturnType<typeof newsServiceGetNewsFeed>>, TError = ErrorType<unknown>>(
 params: undefined |  NewsServiceGetNewsFeedParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof newsServiceGetNewsFeed>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof newsServiceGetNewsFeed>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useNewsServiceGetNewsFeed<TData = Awaited<ReturnType<typeof newsServiceGetNewsFeed>>, TError = ErrorType<unknown>>(
 params?: NewsServiceGetNewsFeedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof newsServiceGetNewsFeed>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof newsServiceGetNewsFeed>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useNewsServiceGetNewsFeed<TData = Awaited<ReturnType<typeof newsServiceGetNewsFeed>>, TError = ErrorType<unknown>>(
 params?: NewsServiceGetNewsFeedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof newsServiceGetNewsFeed>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useNewsServiceGetNewsFeed<TData = Awaited<ReturnType<typeof newsServiceGetNewsFeed>>, TError = ErrorType<unknown>>(
 params?: NewsServiceGetNewsFeedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof newsServiceGetNewsFeed>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getNewsServiceGetNewsFeedQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const newsServiceCreateNews = (
    newsV1CreateNewsRequest: NewsV1CreateNewsRequest,
 signal?: AbortSignal
) => {
      
      
      return requestInstance<unknown>(
      {url: `/v1/news`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: newsV1CreateNewsRequest, signal
    },
      );
    }
  


export const getNewsServiceCreateNewsMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof newsServiceCreateNews>>, TError,{data: NewsV1CreateNewsRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof newsServiceCreateNews>>, TError,{data: NewsV1CreateNewsRequest}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof newsServiceCreateNews>>, {data: NewsV1CreateNewsRequest}> = (props) => {
          const {data} = props ?? {};

          return  newsServiceCreateNews(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type NewsServiceCreateNewsMutationResult = NonNullable<Awaited<ReturnType<typeof newsServiceCreateNews>>>
    export type NewsServiceCreateNewsMutationBody = NewsV1CreateNewsRequest
    export type NewsServiceCreateNewsMutationError = ErrorType<unknown>

    export const useNewsServiceCreateNews = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof newsServiceCreateNews>>, TError,{data: NewsV1CreateNewsRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof newsServiceCreateNews>>,
        TError,
        {data: NewsV1CreateNewsRequest},
        TContext
      > => {

      const mutationOptions = getNewsServiceCreateNewsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const newsServiceGetNewsById = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return requestInstance<NewsV1News>(
      {url: `/v1/news/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getNewsServiceGetNewsByIdQueryKey = (id: string,) => {
    return [`/v1/news/${id}`] as const;
    }

    
export const getNewsServiceGetNewsByIdQueryOptions = <TData = Awaited<ReturnType<typeof newsServiceGetNewsById>>, TError = ErrorType<unknown>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof newsServiceGetNewsById>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getNewsServiceGetNewsByIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof newsServiceGetNewsById>>> = ({ signal }) => newsServiceGetNewsById(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof newsServiceGetNewsById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type NewsServiceGetNewsByIdQueryResult = NonNullable<Awaited<ReturnType<typeof newsServiceGetNewsById>>>
export type NewsServiceGetNewsByIdQueryError = ErrorType<unknown>


export function useNewsServiceGetNewsById<TData = Awaited<ReturnType<typeof newsServiceGetNewsById>>, TError = ErrorType<unknown>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof newsServiceGetNewsById>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof newsServiceGetNewsById>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useNewsServiceGetNewsById<TData = Awaited<ReturnType<typeof newsServiceGetNewsById>>, TError = ErrorType<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof newsServiceGetNewsById>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof newsServiceGetNewsById>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useNewsServiceGetNewsById<TData = Awaited<ReturnType<typeof newsServiceGetNewsById>>, TError = ErrorType<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof newsServiceGetNewsById>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useNewsServiceGetNewsById<TData = Awaited<ReturnType<typeof newsServiceGetNewsById>>, TError = ErrorType<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof newsServiceGetNewsById>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getNewsServiceGetNewsByIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const newsServiceUpdateNews = (
    id: string,
    newsV1UpdateNewsRequest: NewsV1UpdateNewsRequest,
 ) => {
      
      
      return requestInstance<unknown>(
      {url: `/v1/news/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: newsV1UpdateNewsRequest
    },
      );
    }
  


export const getNewsServiceUpdateNewsMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof newsServiceUpdateNews>>, TError,{id: string;data: NewsV1UpdateNewsRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof newsServiceUpdateNews>>, TError,{id: string;data: NewsV1UpdateNewsRequest}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof newsServiceUpdateNews>>, {id: string;data: NewsV1UpdateNewsRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  newsServiceUpdateNews(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type NewsServiceUpdateNewsMutationResult = NonNullable<Awaited<ReturnType<typeof newsServiceUpdateNews>>>
    export type NewsServiceUpdateNewsMutationBody = NewsV1UpdateNewsRequest
    export type NewsServiceUpdateNewsMutationError = ErrorType<unknown>

    export const useNewsServiceUpdateNews = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof newsServiceUpdateNews>>, TError,{id: string;data: NewsV1UpdateNewsRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof newsServiceUpdateNews>>,
        TError,
        {id: string;data: NewsV1UpdateNewsRequest},
        TContext
      > => {

      const mutationOptions = getNewsServiceUpdateNewsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const newsServiceDeleteNews = (
    id: string,
 ) => {
      
      
      return requestInstance<unknown>(
      {url: `/v1/news/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getNewsServiceDeleteNewsMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof newsServiceDeleteNews>>, TError,{id: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof newsServiceDeleteNews>>, TError,{id: string}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof newsServiceDeleteNews>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  newsServiceDeleteNews(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type NewsServiceDeleteNewsMutationResult = NonNullable<Awaited<ReturnType<typeof newsServiceDeleteNews>>>
    
    export type NewsServiceDeleteNewsMutationError = ErrorType<unknown>

    export const useNewsServiceDeleteNews = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof newsServiceDeleteNews>>, TError,{id: string}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof newsServiceDeleteNews>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getNewsServiceDeleteNewsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
