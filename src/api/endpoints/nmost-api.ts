/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * OpenAPI spec version: 0.0.1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  AiV1ChatResponse,
  AiV1CreateChatRequest,
  AuthV1LoginRequest,
  AuthV1LoginResponse,
  AuthV1TokenResponse,
  CategoryServiceGetCategoryFeedParams,
  CategoryV1Category,
  CategoryV1CreateCategoryRequest,
  CategoryV1GetCategoryFeedResponse,
  CategoryV1UpdateCategoryRequest,
  MediaServiceGetMediaFeedParams,
  MediaV1CreateMediaRequest,
  MediaV1GetMediaFeedResponse,
  MediaV1Media,
  MediaV1UpdateMediaRequest,
  NewsServiceGetNewsFeedParams,
  NewsV1CreateNewsRequest,
  NewsV1GetNewsFeedResponse,
  NewsV1News,
  NewsV1UpdateNewsRequest,
  SpecialistServiceGetSpecialistFeedParams,
  SpecialistV1CreateSpecialistRequest,
  SpecialistV1GetSpecialistFeedResponse,
  SpecialistV1Specialist,
  SpecialistV1UpdateSpecialistRequest,
  TagsServiceGetTagsFeedParams,
  TagsV1CreateTagsRequest,
  TagsV1GetTagsByCategoryResponse,
  TagsV1GetTagsFeedResponse,
  TagsV1Tags,
  TagsV1UpdateTagsRequest
} from '../model'
import { requestInstance } from './axios-instance';
import type { ErrorType } from './axios-instance';



export const aIServiceChat = (
    aiV1CreateChatRequest: AiV1CreateChatRequest,
 signal?: AbortSignal
) => {
      
      
      return requestInstance<AiV1ChatResponse>(
      {url: `/v1/ai/chat`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: aiV1CreateChatRequest, signal
    },
      );
    }
  


export const getAIServiceChatMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof aIServiceChat>>, TError,{data: AiV1CreateChatRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof aIServiceChat>>, TError,{data: AiV1CreateChatRequest}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof aIServiceChat>>, {data: AiV1CreateChatRequest}> = (props) => {
          const {data} = props ?? {};

          return  aIServiceChat(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AIServiceChatMutationResult = NonNullable<Awaited<ReturnType<typeof aIServiceChat>>>
    export type AIServiceChatMutationBody = AiV1CreateChatRequest
    export type AIServiceChatMutationError = ErrorType<unknown>

    export const useAIServiceChat = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof aIServiceChat>>, TError,{data: AiV1CreateChatRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof aIServiceChat>>,
        TError,
        {data: AiV1CreateChatRequest},
        TContext
      > => {

      const mutationOptions = getAIServiceChatMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const categoryServiceGetCategoryFeed = (
    params?: CategoryServiceGetCategoryFeedParams,
 signal?: AbortSignal
) => {
      
      
      return requestInstance<CategoryV1GetCategoryFeedResponse>(
      {url: `/v1/category`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getCategoryServiceGetCategoryFeedQueryKey = (params?: CategoryServiceGetCategoryFeedParams,) => {
    return [`/v1/category`, ...(params ? [params]: [])] as const;
    }

    
export const getCategoryServiceGetCategoryFeedQueryOptions = <TData = Awaited<ReturnType<typeof categoryServiceGetCategoryFeed>>, TError = ErrorType<unknown>>(params?: CategoryServiceGetCategoryFeedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof categoryServiceGetCategoryFeed>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCategoryServiceGetCategoryFeedQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof categoryServiceGetCategoryFeed>>> = ({ signal }) => categoryServiceGetCategoryFeed(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof categoryServiceGetCategoryFeed>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type CategoryServiceGetCategoryFeedQueryResult = NonNullable<Awaited<ReturnType<typeof categoryServiceGetCategoryFeed>>>
export type CategoryServiceGetCategoryFeedQueryError = ErrorType<unknown>


export function useCategoryServiceGetCategoryFeed<TData = Awaited<ReturnType<typeof categoryServiceGetCategoryFeed>>, TError = ErrorType<unknown>>(
 params: undefined |  CategoryServiceGetCategoryFeedParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof categoryServiceGetCategoryFeed>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof categoryServiceGetCategoryFeed>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useCategoryServiceGetCategoryFeed<TData = Awaited<ReturnType<typeof categoryServiceGetCategoryFeed>>, TError = ErrorType<unknown>>(
 params?: CategoryServiceGetCategoryFeedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof categoryServiceGetCategoryFeed>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof categoryServiceGetCategoryFeed>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useCategoryServiceGetCategoryFeed<TData = Awaited<ReturnType<typeof categoryServiceGetCategoryFeed>>, TError = ErrorType<unknown>>(
 params?: CategoryServiceGetCategoryFeedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof categoryServiceGetCategoryFeed>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useCategoryServiceGetCategoryFeed<TData = Awaited<ReturnType<typeof categoryServiceGetCategoryFeed>>, TError = ErrorType<unknown>>(
 params?: CategoryServiceGetCategoryFeedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof categoryServiceGetCategoryFeed>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getCategoryServiceGetCategoryFeedQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const categoryServiceCreateCategory = (
    categoryV1CreateCategoryRequest: CategoryV1CreateCategoryRequest,
 signal?: AbortSignal
) => {
      
      
      return requestInstance<unknown>(
      {url: `/v1/category`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: categoryV1CreateCategoryRequest, signal
    },
      );
    }
  


export const getCategoryServiceCreateCategoryMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof categoryServiceCreateCategory>>, TError,{data: CategoryV1CreateCategoryRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof categoryServiceCreateCategory>>, TError,{data: CategoryV1CreateCategoryRequest}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof categoryServiceCreateCategory>>, {data: CategoryV1CreateCategoryRequest}> = (props) => {
          const {data} = props ?? {};

          return  categoryServiceCreateCategory(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CategoryServiceCreateCategoryMutationResult = NonNullable<Awaited<ReturnType<typeof categoryServiceCreateCategory>>>
    export type CategoryServiceCreateCategoryMutationBody = CategoryV1CreateCategoryRequest
    export type CategoryServiceCreateCategoryMutationError = ErrorType<unknown>

    export const useCategoryServiceCreateCategory = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof categoryServiceCreateCategory>>, TError,{data: CategoryV1CreateCategoryRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof categoryServiceCreateCategory>>,
        TError,
        {data: CategoryV1CreateCategoryRequest},
        TContext
      > => {

      const mutationOptions = getCategoryServiceCreateCategoryMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const categoryServiceGetCategoryById = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return requestInstance<CategoryV1Category>(
      {url: `/v1/category/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getCategoryServiceGetCategoryByIdQueryKey = (id: string,) => {
    return [`/v1/category/${id}`] as const;
    }

    
export const getCategoryServiceGetCategoryByIdQueryOptions = <TData = Awaited<ReturnType<typeof categoryServiceGetCategoryById>>, TError = ErrorType<unknown>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof categoryServiceGetCategoryById>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCategoryServiceGetCategoryByIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof categoryServiceGetCategoryById>>> = ({ signal }) => categoryServiceGetCategoryById(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof categoryServiceGetCategoryById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type CategoryServiceGetCategoryByIdQueryResult = NonNullable<Awaited<ReturnType<typeof categoryServiceGetCategoryById>>>
export type CategoryServiceGetCategoryByIdQueryError = ErrorType<unknown>


export function useCategoryServiceGetCategoryById<TData = Awaited<ReturnType<typeof categoryServiceGetCategoryById>>, TError = ErrorType<unknown>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof categoryServiceGetCategoryById>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof categoryServiceGetCategoryById>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useCategoryServiceGetCategoryById<TData = Awaited<ReturnType<typeof categoryServiceGetCategoryById>>, TError = ErrorType<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof categoryServiceGetCategoryById>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof categoryServiceGetCategoryById>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useCategoryServiceGetCategoryById<TData = Awaited<ReturnType<typeof categoryServiceGetCategoryById>>, TError = ErrorType<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof categoryServiceGetCategoryById>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useCategoryServiceGetCategoryById<TData = Awaited<ReturnType<typeof categoryServiceGetCategoryById>>, TError = ErrorType<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof categoryServiceGetCategoryById>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getCategoryServiceGetCategoryByIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const categoryServiceUpdateCategory = (
    id: string,
    categoryV1UpdateCategoryRequest: CategoryV1UpdateCategoryRequest,
 ) => {
      
      
      return requestInstance<unknown>(
      {url: `/v1/category/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: categoryV1UpdateCategoryRequest
    },
      );
    }
  


export const getCategoryServiceUpdateCategoryMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof categoryServiceUpdateCategory>>, TError,{id: string;data: CategoryV1UpdateCategoryRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof categoryServiceUpdateCategory>>, TError,{id: string;data: CategoryV1UpdateCategoryRequest}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof categoryServiceUpdateCategory>>, {id: string;data: CategoryV1UpdateCategoryRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  categoryServiceUpdateCategory(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CategoryServiceUpdateCategoryMutationResult = NonNullable<Awaited<ReturnType<typeof categoryServiceUpdateCategory>>>
    export type CategoryServiceUpdateCategoryMutationBody = CategoryV1UpdateCategoryRequest
    export type CategoryServiceUpdateCategoryMutationError = ErrorType<unknown>

    export const useCategoryServiceUpdateCategory = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof categoryServiceUpdateCategory>>, TError,{id: string;data: CategoryV1UpdateCategoryRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof categoryServiceUpdateCategory>>,
        TError,
        {id: string;data: CategoryV1UpdateCategoryRequest},
        TContext
      > => {

      const mutationOptions = getCategoryServiceUpdateCategoryMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const categoryServiceDeleteCategory = (
    id: string,
 ) => {
      
      
      return requestInstance<unknown>(
      {url: `/v1/category/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getCategoryServiceDeleteCategoryMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof categoryServiceDeleteCategory>>, TError,{id: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof categoryServiceDeleteCategory>>, TError,{id: string}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof categoryServiceDeleteCategory>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  categoryServiceDeleteCategory(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CategoryServiceDeleteCategoryMutationResult = NonNullable<Awaited<ReturnType<typeof categoryServiceDeleteCategory>>>
    
    export type CategoryServiceDeleteCategoryMutationError = ErrorType<unknown>

    export const useCategoryServiceDeleteCategory = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof categoryServiceDeleteCategory>>, TError,{id: string}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof categoryServiceDeleteCategory>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getCategoryServiceDeleteCategoryMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const authServiceLogin = (
    authV1LoginRequest: AuthV1LoginRequest,
 signal?: AbortSignal
) => {
      
      
      return requestInstance<AuthV1LoginResponse>(
      {url: `/v1/login`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: authV1LoginRequest, signal
    },
      );
    }
  


export const getAuthServiceLoginMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authServiceLogin>>, TError,{data: AuthV1LoginRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof authServiceLogin>>, TError,{data: AuthV1LoginRequest}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof authServiceLogin>>, {data: AuthV1LoginRequest}> = (props) => {
          const {data} = props ?? {};

          return  authServiceLogin(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AuthServiceLoginMutationResult = NonNullable<Awaited<ReturnType<typeof authServiceLogin>>>
    export type AuthServiceLoginMutationBody = AuthV1LoginRequest
    export type AuthServiceLoginMutationError = ErrorType<unknown>

    export const useAuthServiceLogin = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authServiceLogin>>, TError,{data: AuthV1LoginRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof authServiceLogin>>,
        TError,
        {data: AuthV1LoginRequest},
        TContext
      > => {

      const mutationOptions = getAuthServiceLoginMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const mediaServiceGetMediaFeed = (
    params?: MediaServiceGetMediaFeedParams,
 signal?: AbortSignal
) => {
      
      
      return requestInstance<MediaV1GetMediaFeedResponse>(
      {url: `/v1/media`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getMediaServiceGetMediaFeedQueryKey = (params?: MediaServiceGetMediaFeedParams,) => {
    return [`/v1/media`, ...(params ? [params]: [])] as const;
    }

    
export const getMediaServiceGetMediaFeedQueryOptions = <TData = Awaited<ReturnType<typeof mediaServiceGetMediaFeed>>, TError = ErrorType<unknown>>(params?: MediaServiceGetMediaFeedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof mediaServiceGetMediaFeed>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getMediaServiceGetMediaFeedQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof mediaServiceGetMediaFeed>>> = ({ signal }) => mediaServiceGetMediaFeed(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof mediaServiceGetMediaFeed>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type MediaServiceGetMediaFeedQueryResult = NonNullable<Awaited<ReturnType<typeof mediaServiceGetMediaFeed>>>
export type MediaServiceGetMediaFeedQueryError = ErrorType<unknown>


export function useMediaServiceGetMediaFeed<TData = Awaited<ReturnType<typeof mediaServiceGetMediaFeed>>, TError = ErrorType<unknown>>(
 params: undefined |  MediaServiceGetMediaFeedParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof mediaServiceGetMediaFeed>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof mediaServiceGetMediaFeed>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useMediaServiceGetMediaFeed<TData = Awaited<ReturnType<typeof mediaServiceGetMediaFeed>>, TError = ErrorType<unknown>>(
 params?: MediaServiceGetMediaFeedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof mediaServiceGetMediaFeed>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof mediaServiceGetMediaFeed>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useMediaServiceGetMediaFeed<TData = Awaited<ReturnType<typeof mediaServiceGetMediaFeed>>, TError = ErrorType<unknown>>(
 params?: MediaServiceGetMediaFeedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof mediaServiceGetMediaFeed>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useMediaServiceGetMediaFeed<TData = Awaited<ReturnType<typeof mediaServiceGetMediaFeed>>, TError = ErrorType<unknown>>(
 params?: MediaServiceGetMediaFeedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof mediaServiceGetMediaFeed>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getMediaServiceGetMediaFeedQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const mediaServiceCreateMedia = (
    mediaV1CreateMediaRequest: MediaV1CreateMediaRequest,
 signal?: AbortSignal
) => {
      
      
      return requestInstance<unknown>(
      {url: `/v1/media`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: mediaV1CreateMediaRequest, signal
    },
      );
    }
  


export const getMediaServiceCreateMediaMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof mediaServiceCreateMedia>>, TError,{data: MediaV1CreateMediaRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof mediaServiceCreateMedia>>, TError,{data: MediaV1CreateMediaRequest}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof mediaServiceCreateMedia>>, {data: MediaV1CreateMediaRequest}> = (props) => {
          const {data} = props ?? {};

          return  mediaServiceCreateMedia(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type MediaServiceCreateMediaMutationResult = NonNullable<Awaited<ReturnType<typeof mediaServiceCreateMedia>>>
    export type MediaServiceCreateMediaMutationBody = MediaV1CreateMediaRequest
    export type MediaServiceCreateMediaMutationError = ErrorType<unknown>

    export const useMediaServiceCreateMedia = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof mediaServiceCreateMedia>>, TError,{data: MediaV1CreateMediaRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof mediaServiceCreateMedia>>,
        TError,
        {data: MediaV1CreateMediaRequest},
        TContext
      > => {

      const mutationOptions = getMediaServiceCreateMediaMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const mediaServiceGetMediaById = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return requestInstance<MediaV1Media>(
      {url: `/v1/media/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getMediaServiceGetMediaByIdQueryKey = (id: string,) => {
    return [`/v1/media/${id}`] as const;
    }

    
export const getMediaServiceGetMediaByIdQueryOptions = <TData = Awaited<ReturnType<typeof mediaServiceGetMediaById>>, TError = ErrorType<unknown>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof mediaServiceGetMediaById>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getMediaServiceGetMediaByIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof mediaServiceGetMediaById>>> = ({ signal }) => mediaServiceGetMediaById(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof mediaServiceGetMediaById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type MediaServiceGetMediaByIdQueryResult = NonNullable<Awaited<ReturnType<typeof mediaServiceGetMediaById>>>
export type MediaServiceGetMediaByIdQueryError = ErrorType<unknown>


export function useMediaServiceGetMediaById<TData = Awaited<ReturnType<typeof mediaServiceGetMediaById>>, TError = ErrorType<unknown>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof mediaServiceGetMediaById>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof mediaServiceGetMediaById>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useMediaServiceGetMediaById<TData = Awaited<ReturnType<typeof mediaServiceGetMediaById>>, TError = ErrorType<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof mediaServiceGetMediaById>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof mediaServiceGetMediaById>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useMediaServiceGetMediaById<TData = Awaited<ReturnType<typeof mediaServiceGetMediaById>>, TError = ErrorType<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof mediaServiceGetMediaById>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useMediaServiceGetMediaById<TData = Awaited<ReturnType<typeof mediaServiceGetMediaById>>, TError = ErrorType<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof mediaServiceGetMediaById>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getMediaServiceGetMediaByIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const mediaServiceUpdateMedia = (
    id: string,
    mediaV1UpdateMediaRequest: MediaV1UpdateMediaRequest,
 ) => {
      
      
      return requestInstance<unknown>(
      {url: `/v1/media/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: mediaV1UpdateMediaRequest
    },
      );
    }
  


export const getMediaServiceUpdateMediaMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof mediaServiceUpdateMedia>>, TError,{id: string;data: MediaV1UpdateMediaRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof mediaServiceUpdateMedia>>, TError,{id: string;data: MediaV1UpdateMediaRequest}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof mediaServiceUpdateMedia>>, {id: string;data: MediaV1UpdateMediaRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  mediaServiceUpdateMedia(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type MediaServiceUpdateMediaMutationResult = NonNullable<Awaited<ReturnType<typeof mediaServiceUpdateMedia>>>
    export type MediaServiceUpdateMediaMutationBody = MediaV1UpdateMediaRequest
    export type MediaServiceUpdateMediaMutationError = ErrorType<unknown>

    export const useMediaServiceUpdateMedia = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof mediaServiceUpdateMedia>>, TError,{id: string;data: MediaV1UpdateMediaRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof mediaServiceUpdateMedia>>,
        TError,
        {id: string;data: MediaV1UpdateMediaRequest},
        TContext
      > => {

      const mutationOptions = getMediaServiceUpdateMediaMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const mediaServiceDeleteMedia = (
    id: string,
 ) => {
      
      
      return requestInstance<unknown>(
      {url: `/v1/media/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getMediaServiceDeleteMediaMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof mediaServiceDeleteMedia>>, TError,{id: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof mediaServiceDeleteMedia>>, TError,{id: string}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof mediaServiceDeleteMedia>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  mediaServiceDeleteMedia(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type MediaServiceDeleteMediaMutationResult = NonNullable<Awaited<ReturnType<typeof mediaServiceDeleteMedia>>>
    
    export type MediaServiceDeleteMediaMutationError = ErrorType<unknown>

    export const useMediaServiceDeleteMedia = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof mediaServiceDeleteMedia>>, TError,{id: string}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof mediaServiceDeleteMedia>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getMediaServiceDeleteMediaMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const newsServiceGetNewsFeed = (
    params?: NewsServiceGetNewsFeedParams,
 signal?: AbortSignal
) => {
      
      
      return requestInstance<NewsV1GetNewsFeedResponse>(
      {url: `/v1/news`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getNewsServiceGetNewsFeedQueryKey = (params?: NewsServiceGetNewsFeedParams,) => {
    return [`/v1/news`, ...(params ? [params]: [])] as const;
    }

    
export const getNewsServiceGetNewsFeedQueryOptions = <TData = Awaited<ReturnType<typeof newsServiceGetNewsFeed>>, TError = ErrorType<unknown>>(params?: NewsServiceGetNewsFeedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof newsServiceGetNewsFeed>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getNewsServiceGetNewsFeedQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof newsServiceGetNewsFeed>>> = ({ signal }) => newsServiceGetNewsFeed(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof newsServiceGetNewsFeed>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type NewsServiceGetNewsFeedQueryResult = NonNullable<Awaited<ReturnType<typeof newsServiceGetNewsFeed>>>
export type NewsServiceGetNewsFeedQueryError = ErrorType<unknown>


export function useNewsServiceGetNewsFeed<TData = Awaited<ReturnType<typeof newsServiceGetNewsFeed>>, TError = ErrorType<unknown>>(
 params: undefined |  NewsServiceGetNewsFeedParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof newsServiceGetNewsFeed>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof newsServiceGetNewsFeed>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useNewsServiceGetNewsFeed<TData = Awaited<ReturnType<typeof newsServiceGetNewsFeed>>, TError = ErrorType<unknown>>(
 params?: NewsServiceGetNewsFeedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof newsServiceGetNewsFeed>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof newsServiceGetNewsFeed>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useNewsServiceGetNewsFeed<TData = Awaited<ReturnType<typeof newsServiceGetNewsFeed>>, TError = ErrorType<unknown>>(
 params?: NewsServiceGetNewsFeedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof newsServiceGetNewsFeed>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useNewsServiceGetNewsFeed<TData = Awaited<ReturnType<typeof newsServiceGetNewsFeed>>, TError = ErrorType<unknown>>(
 params?: NewsServiceGetNewsFeedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof newsServiceGetNewsFeed>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getNewsServiceGetNewsFeedQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const newsServiceCreateNews = (
    newsV1CreateNewsRequest: NewsV1CreateNewsRequest,
 signal?: AbortSignal
) => {
      
      
      return requestInstance<unknown>(
      {url: `/v1/news`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: newsV1CreateNewsRequest, signal
    },
      );
    }
  


export const getNewsServiceCreateNewsMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof newsServiceCreateNews>>, TError,{data: NewsV1CreateNewsRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof newsServiceCreateNews>>, TError,{data: NewsV1CreateNewsRequest}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof newsServiceCreateNews>>, {data: NewsV1CreateNewsRequest}> = (props) => {
          const {data} = props ?? {};

          return  newsServiceCreateNews(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type NewsServiceCreateNewsMutationResult = NonNullable<Awaited<ReturnType<typeof newsServiceCreateNews>>>
    export type NewsServiceCreateNewsMutationBody = NewsV1CreateNewsRequest
    export type NewsServiceCreateNewsMutationError = ErrorType<unknown>

    export const useNewsServiceCreateNews = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof newsServiceCreateNews>>, TError,{data: NewsV1CreateNewsRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof newsServiceCreateNews>>,
        TError,
        {data: NewsV1CreateNewsRequest},
        TContext
      > => {

      const mutationOptions = getNewsServiceCreateNewsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const newsServiceGetNewsById = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return requestInstance<NewsV1News>(
      {url: `/v1/news/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getNewsServiceGetNewsByIdQueryKey = (id: string,) => {
    return [`/v1/news/${id}`] as const;
    }

    
export const getNewsServiceGetNewsByIdQueryOptions = <TData = Awaited<ReturnType<typeof newsServiceGetNewsById>>, TError = ErrorType<unknown>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof newsServiceGetNewsById>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getNewsServiceGetNewsByIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof newsServiceGetNewsById>>> = ({ signal }) => newsServiceGetNewsById(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof newsServiceGetNewsById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type NewsServiceGetNewsByIdQueryResult = NonNullable<Awaited<ReturnType<typeof newsServiceGetNewsById>>>
export type NewsServiceGetNewsByIdQueryError = ErrorType<unknown>


export function useNewsServiceGetNewsById<TData = Awaited<ReturnType<typeof newsServiceGetNewsById>>, TError = ErrorType<unknown>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof newsServiceGetNewsById>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof newsServiceGetNewsById>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useNewsServiceGetNewsById<TData = Awaited<ReturnType<typeof newsServiceGetNewsById>>, TError = ErrorType<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof newsServiceGetNewsById>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof newsServiceGetNewsById>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useNewsServiceGetNewsById<TData = Awaited<ReturnType<typeof newsServiceGetNewsById>>, TError = ErrorType<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof newsServiceGetNewsById>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useNewsServiceGetNewsById<TData = Awaited<ReturnType<typeof newsServiceGetNewsById>>, TError = ErrorType<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof newsServiceGetNewsById>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getNewsServiceGetNewsByIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const newsServiceUpdateNews = (
    id: string,
    newsV1UpdateNewsRequest: NewsV1UpdateNewsRequest,
 ) => {
      
      
      return requestInstance<unknown>(
      {url: `/v1/news/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: newsV1UpdateNewsRequest
    },
      );
    }
  


export const getNewsServiceUpdateNewsMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof newsServiceUpdateNews>>, TError,{id: string;data: NewsV1UpdateNewsRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof newsServiceUpdateNews>>, TError,{id: string;data: NewsV1UpdateNewsRequest}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof newsServiceUpdateNews>>, {id: string;data: NewsV1UpdateNewsRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  newsServiceUpdateNews(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type NewsServiceUpdateNewsMutationResult = NonNullable<Awaited<ReturnType<typeof newsServiceUpdateNews>>>
    export type NewsServiceUpdateNewsMutationBody = NewsV1UpdateNewsRequest
    export type NewsServiceUpdateNewsMutationError = ErrorType<unknown>

    export const useNewsServiceUpdateNews = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof newsServiceUpdateNews>>, TError,{id: string;data: NewsV1UpdateNewsRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof newsServiceUpdateNews>>,
        TError,
        {id: string;data: NewsV1UpdateNewsRequest},
        TContext
      > => {

      const mutationOptions = getNewsServiceUpdateNewsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const newsServiceDeleteNews = (
    id: string,
 ) => {
      
      
      return requestInstance<unknown>(
      {url: `/v1/news/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getNewsServiceDeleteNewsMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof newsServiceDeleteNews>>, TError,{id: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof newsServiceDeleteNews>>, TError,{id: string}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof newsServiceDeleteNews>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  newsServiceDeleteNews(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type NewsServiceDeleteNewsMutationResult = NonNullable<Awaited<ReturnType<typeof newsServiceDeleteNews>>>
    
    export type NewsServiceDeleteNewsMutationError = ErrorType<unknown>

    export const useNewsServiceDeleteNews = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof newsServiceDeleteNews>>, TError,{id: string}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof newsServiceDeleteNews>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getNewsServiceDeleteNewsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const specialistServiceGetSpecialistFeed = (
    params?: SpecialistServiceGetSpecialistFeedParams,
 signal?: AbortSignal
) => {
      
      
      return requestInstance<SpecialistV1GetSpecialistFeedResponse>(
      {url: `/v1/specialist`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getSpecialistServiceGetSpecialistFeedQueryKey = (params?: SpecialistServiceGetSpecialistFeedParams,) => {
    return [`/v1/specialist`, ...(params ? [params]: [])] as const;
    }

    
export const getSpecialistServiceGetSpecialistFeedQueryOptions = <TData = Awaited<ReturnType<typeof specialistServiceGetSpecialistFeed>>, TError = ErrorType<unknown>>(params?: SpecialistServiceGetSpecialistFeedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof specialistServiceGetSpecialistFeed>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSpecialistServiceGetSpecialistFeedQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof specialistServiceGetSpecialistFeed>>> = ({ signal }) => specialistServiceGetSpecialistFeed(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof specialistServiceGetSpecialistFeed>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type SpecialistServiceGetSpecialistFeedQueryResult = NonNullable<Awaited<ReturnType<typeof specialistServiceGetSpecialistFeed>>>
export type SpecialistServiceGetSpecialistFeedQueryError = ErrorType<unknown>


export function useSpecialistServiceGetSpecialistFeed<TData = Awaited<ReturnType<typeof specialistServiceGetSpecialistFeed>>, TError = ErrorType<unknown>>(
 params: undefined |  SpecialistServiceGetSpecialistFeedParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof specialistServiceGetSpecialistFeed>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof specialistServiceGetSpecialistFeed>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useSpecialistServiceGetSpecialistFeed<TData = Awaited<ReturnType<typeof specialistServiceGetSpecialistFeed>>, TError = ErrorType<unknown>>(
 params?: SpecialistServiceGetSpecialistFeedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof specialistServiceGetSpecialistFeed>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof specialistServiceGetSpecialistFeed>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useSpecialistServiceGetSpecialistFeed<TData = Awaited<ReturnType<typeof specialistServiceGetSpecialistFeed>>, TError = ErrorType<unknown>>(
 params?: SpecialistServiceGetSpecialistFeedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof specialistServiceGetSpecialistFeed>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useSpecialistServiceGetSpecialistFeed<TData = Awaited<ReturnType<typeof specialistServiceGetSpecialistFeed>>, TError = ErrorType<unknown>>(
 params?: SpecialistServiceGetSpecialistFeedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof specialistServiceGetSpecialistFeed>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getSpecialistServiceGetSpecialistFeedQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const specialistServiceCreateSpecialist = (
    specialistV1CreateSpecialistRequest: SpecialistV1CreateSpecialistRequest,
 signal?: AbortSignal
) => {
      
      
      return requestInstance<unknown>(
      {url: `/v1/specialist`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: specialistV1CreateSpecialistRequest, signal
    },
      );
    }
  


export const getSpecialistServiceCreateSpecialistMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof specialistServiceCreateSpecialist>>, TError,{data: SpecialistV1CreateSpecialistRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof specialistServiceCreateSpecialist>>, TError,{data: SpecialistV1CreateSpecialistRequest}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof specialistServiceCreateSpecialist>>, {data: SpecialistV1CreateSpecialistRequest}> = (props) => {
          const {data} = props ?? {};

          return  specialistServiceCreateSpecialist(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SpecialistServiceCreateSpecialistMutationResult = NonNullable<Awaited<ReturnType<typeof specialistServiceCreateSpecialist>>>
    export type SpecialistServiceCreateSpecialistMutationBody = SpecialistV1CreateSpecialistRequest
    export type SpecialistServiceCreateSpecialistMutationError = ErrorType<unknown>

    export const useSpecialistServiceCreateSpecialist = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof specialistServiceCreateSpecialist>>, TError,{data: SpecialistV1CreateSpecialistRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof specialistServiceCreateSpecialist>>,
        TError,
        {data: SpecialistV1CreateSpecialistRequest},
        TContext
      > => {

      const mutationOptions = getSpecialistServiceCreateSpecialistMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const specialistServiceGetSpecialistById = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return requestInstance<SpecialistV1Specialist>(
      {url: `/v1/specialist/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getSpecialistServiceGetSpecialistByIdQueryKey = (id: string,) => {
    return [`/v1/specialist/${id}`] as const;
    }

    
export const getSpecialistServiceGetSpecialistByIdQueryOptions = <TData = Awaited<ReturnType<typeof specialistServiceGetSpecialistById>>, TError = ErrorType<unknown>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof specialistServiceGetSpecialistById>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSpecialistServiceGetSpecialistByIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof specialistServiceGetSpecialistById>>> = ({ signal }) => specialistServiceGetSpecialistById(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof specialistServiceGetSpecialistById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type SpecialistServiceGetSpecialistByIdQueryResult = NonNullable<Awaited<ReturnType<typeof specialistServiceGetSpecialistById>>>
export type SpecialistServiceGetSpecialistByIdQueryError = ErrorType<unknown>


export function useSpecialistServiceGetSpecialistById<TData = Awaited<ReturnType<typeof specialistServiceGetSpecialistById>>, TError = ErrorType<unknown>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof specialistServiceGetSpecialistById>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof specialistServiceGetSpecialistById>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useSpecialistServiceGetSpecialistById<TData = Awaited<ReturnType<typeof specialistServiceGetSpecialistById>>, TError = ErrorType<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof specialistServiceGetSpecialistById>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof specialistServiceGetSpecialistById>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useSpecialistServiceGetSpecialistById<TData = Awaited<ReturnType<typeof specialistServiceGetSpecialistById>>, TError = ErrorType<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof specialistServiceGetSpecialistById>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useSpecialistServiceGetSpecialistById<TData = Awaited<ReturnType<typeof specialistServiceGetSpecialistById>>, TError = ErrorType<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof specialistServiceGetSpecialistById>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getSpecialistServiceGetSpecialistByIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const specialistServiceUpdateSpecialist = (
    id: string,
    specialistV1UpdateSpecialistRequest: SpecialistV1UpdateSpecialistRequest,
 ) => {
      
      
      return requestInstance<unknown>(
      {url: `/v1/specialist/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: specialistV1UpdateSpecialistRequest
    },
      );
    }
  


export const getSpecialistServiceUpdateSpecialistMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof specialistServiceUpdateSpecialist>>, TError,{id: string;data: SpecialistV1UpdateSpecialistRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof specialistServiceUpdateSpecialist>>, TError,{id: string;data: SpecialistV1UpdateSpecialistRequest}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof specialistServiceUpdateSpecialist>>, {id: string;data: SpecialistV1UpdateSpecialistRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  specialistServiceUpdateSpecialist(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SpecialistServiceUpdateSpecialistMutationResult = NonNullable<Awaited<ReturnType<typeof specialistServiceUpdateSpecialist>>>
    export type SpecialistServiceUpdateSpecialistMutationBody = SpecialistV1UpdateSpecialistRequest
    export type SpecialistServiceUpdateSpecialistMutationError = ErrorType<unknown>

    export const useSpecialistServiceUpdateSpecialist = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof specialistServiceUpdateSpecialist>>, TError,{id: string;data: SpecialistV1UpdateSpecialistRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof specialistServiceUpdateSpecialist>>,
        TError,
        {id: string;data: SpecialistV1UpdateSpecialistRequest},
        TContext
      > => {

      const mutationOptions = getSpecialistServiceUpdateSpecialistMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const specialistServiceDeleteSpecialist = (
    id: string,
 ) => {
      
      
      return requestInstance<unknown>(
      {url: `/v1/specialist/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getSpecialistServiceDeleteSpecialistMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof specialistServiceDeleteSpecialist>>, TError,{id: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof specialistServiceDeleteSpecialist>>, TError,{id: string}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof specialistServiceDeleteSpecialist>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  specialistServiceDeleteSpecialist(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SpecialistServiceDeleteSpecialistMutationResult = NonNullable<Awaited<ReturnType<typeof specialistServiceDeleteSpecialist>>>
    
    export type SpecialistServiceDeleteSpecialistMutationError = ErrorType<unknown>

    export const useSpecialistServiceDeleteSpecialist = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof specialistServiceDeleteSpecialist>>, TError,{id: string}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof specialistServiceDeleteSpecialist>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getSpecialistServiceDeleteSpecialistMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const tagsServiceGetTagsFeed = (
    params?: TagsServiceGetTagsFeedParams,
 signal?: AbortSignal
) => {
      
      
      return requestInstance<TagsV1GetTagsFeedResponse>(
      {url: `/v1/tags`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getTagsServiceGetTagsFeedQueryKey = (params?: TagsServiceGetTagsFeedParams,) => {
    return [`/v1/tags`, ...(params ? [params]: [])] as const;
    }

    
export const getTagsServiceGetTagsFeedQueryOptions = <TData = Awaited<ReturnType<typeof tagsServiceGetTagsFeed>>, TError = ErrorType<unknown>>(params?: TagsServiceGetTagsFeedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof tagsServiceGetTagsFeed>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getTagsServiceGetTagsFeedQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof tagsServiceGetTagsFeed>>> = ({ signal }) => tagsServiceGetTagsFeed(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof tagsServiceGetTagsFeed>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type TagsServiceGetTagsFeedQueryResult = NonNullable<Awaited<ReturnType<typeof tagsServiceGetTagsFeed>>>
export type TagsServiceGetTagsFeedQueryError = ErrorType<unknown>


export function useTagsServiceGetTagsFeed<TData = Awaited<ReturnType<typeof tagsServiceGetTagsFeed>>, TError = ErrorType<unknown>>(
 params: undefined |  TagsServiceGetTagsFeedParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof tagsServiceGetTagsFeed>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof tagsServiceGetTagsFeed>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useTagsServiceGetTagsFeed<TData = Awaited<ReturnType<typeof tagsServiceGetTagsFeed>>, TError = ErrorType<unknown>>(
 params?: TagsServiceGetTagsFeedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof tagsServiceGetTagsFeed>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof tagsServiceGetTagsFeed>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useTagsServiceGetTagsFeed<TData = Awaited<ReturnType<typeof tagsServiceGetTagsFeed>>, TError = ErrorType<unknown>>(
 params?: TagsServiceGetTagsFeedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof tagsServiceGetTagsFeed>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useTagsServiceGetTagsFeed<TData = Awaited<ReturnType<typeof tagsServiceGetTagsFeed>>, TError = ErrorType<unknown>>(
 params?: TagsServiceGetTagsFeedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof tagsServiceGetTagsFeed>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getTagsServiceGetTagsFeedQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const tagsServiceCreateTags = (
    tagsV1CreateTagsRequest: TagsV1CreateTagsRequest,
 signal?: AbortSignal
) => {
      
      
      return requestInstance<unknown>(
      {url: `/v1/tags`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: tagsV1CreateTagsRequest, signal
    },
      );
    }
  


export const getTagsServiceCreateTagsMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof tagsServiceCreateTags>>, TError,{data: TagsV1CreateTagsRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof tagsServiceCreateTags>>, TError,{data: TagsV1CreateTagsRequest}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof tagsServiceCreateTags>>, {data: TagsV1CreateTagsRequest}> = (props) => {
          const {data} = props ?? {};

          return  tagsServiceCreateTags(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type TagsServiceCreateTagsMutationResult = NonNullable<Awaited<ReturnType<typeof tagsServiceCreateTags>>>
    export type TagsServiceCreateTagsMutationBody = TagsV1CreateTagsRequest
    export type TagsServiceCreateTagsMutationError = ErrorType<unknown>

    export const useTagsServiceCreateTags = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof tagsServiceCreateTags>>, TError,{data: TagsV1CreateTagsRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof tagsServiceCreateTags>>,
        TError,
        {data: TagsV1CreateTagsRequest},
        TContext
      > => {

      const mutationOptions = getTagsServiceCreateTagsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const tagsServiceGetTagsByCategory = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return requestInstance<TagsV1GetTagsByCategoryResponse>(
      {url: `/v1/tags/category/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getTagsServiceGetTagsByCategoryQueryKey = (id: string,) => {
    return [`/v1/tags/category/${id}`] as const;
    }

    
export const getTagsServiceGetTagsByCategoryQueryOptions = <TData = Awaited<ReturnType<typeof tagsServiceGetTagsByCategory>>, TError = ErrorType<unknown>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof tagsServiceGetTagsByCategory>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getTagsServiceGetTagsByCategoryQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof tagsServiceGetTagsByCategory>>> = ({ signal }) => tagsServiceGetTagsByCategory(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof tagsServiceGetTagsByCategory>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type TagsServiceGetTagsByCategoryQueryResult = NonNullable<Awaited<ReturnType<typeof tagsServiceGetTagsByCategory>>>
export type TagsServiceGetTagsByCategoryQueryError = ErrorType<unknown>


export function useTagsServiceGetTagsByCategory<TData = Awaited<ReturnType<typeof tagsServiceGetTagsByCategory>>, TError = ErrorType<unknown>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof tagsServiceGetTagsByCategory>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof tagsServiceGetTagsByCategory>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useTagsServiceGetTagsByCategory<TData = Awaited<ReturnType<typeof tagsServiceGetTagsByCategory>>, TError = ErrorType<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof tagsServiceGetTagsByCategory>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof tagsServiceGetTagsByCategory>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useTagsServiceGetTagsByCategory<TData = Awaited<ReturnType<typeof tagsServiceGetTagsByCategory>>, TError = ErrorType<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof tagsServiceGetTagsByCategory>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useTagsServiceGetTagsByCategory<TData = Awaited<ReturnType<typeof tagsServiceGetTagsByCategory>>, TError = ErrorType<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof tagsServiceGetTagsByCategory>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getTagsServiceGetTagsByCategoryQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const tagsServiceGetTagsById = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return requestInstance<TagsV1Tags>(
      {url: `/v1/tags/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getTagsServiceGetTagsByIdQueryKey = (id: string,) => {
    return [`/v1/tags/${id}`] as const;
    }

    
export const getTagsServiceGetTagsByIdQueryOptions = <TData = Awaited<ReturnType<typeof tagsServiceGetTagsById>>, TError = ErrorType<unknown>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof tagsServiceGetTagsById>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getTagsServiceGetTagsByIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof tagsServiceGetTagsById>>> = ({ signal }) => tagsServiceGetTagsById(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof tagsServiceGetTagsById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type TagsServiceGetTagsByIdQueryResult = NonNullable<Awaited<ReturnType<typeof tagsServiceGetTagsById>>>
export type TagsServiceGetTagsByIdQueryError = ErrorType<unknown>


export function useTagsServiceGetTagsById<TData = Awaited<ReturnType<typeof tagsServiceGetTagsById>>, TError = ErrorType<unknown>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof tagsServiceGetTagsById>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof tagsServiceGetTagsById>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useTagsServiceGetTagsById<TData = Awaited<ReturnType<typeof tagsServiceGetTagsById>>, TError = ErrorType<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof tagsServiceGetTagsById>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof tagsServiceGetTagsById>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useTagsServiceGetTagsById<TData = Awaited<ReturnType<typeof tagsServiceGetTagsById>>, TError = ErrorType<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof tagsServiceGetTagsById>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useTagsServiceGetTagsById<TData = Awaited<ReturnType<typeof tagsServiceGetTagsById>>, TError = ErrorType<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof tagsServiceGetTagsById>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getTagsServiceGetTagsByIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const tagsServiceUpdateTags = (
    id: string,
    tagsV1UpdateTagsRequest: TagsV1UpdateTagsRequest,
 ) => {
      
      
      return requestInstance<unknown>(
      {url: `/v1/tags/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: tagsV1UpdateTagsRequest
    },
      );
    }
  


export const getTagsServiceUpdateTagsMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof tagsServiceUpdateTags>>, TError,{id: string;data: TagsV1UpdateTagsRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof tagsServiceUpdateTags>>, TError,{id: string;data: TagsV1UpdateTagsRequest}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof tagsServiceUpdateTags>>, {id: string;data: TagsV1UpdateTagsRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  tagsServiceUpdateTags(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type TagsServiceUpdateTagsMutationResult = NonNullable<Awaited<ReturnType<typeof tagsServiceUpdateTags>>>
    export type TagsServiceUpdateTagsMutationBody = TagsV1UpdateTagsRequest
    export type TagsServiceUpdateTagsMutationError = ErrorType<unknown>

    export const useTagsServiceUpdateTags = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof tagsServiceUpdateTags>>, TError,{id: string;data: TagsV1UpdateTagsRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof tagsServiceUpdateTags>>,
        TError,
        {id: string;data: TagsV1UpdateTagsRequest},
        TContext
      > => {

      const mutationOptions = getTagsServiceUpdateTagsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const tagsServiceDeleteTags = (
    id: string,
 ) => {
      
      
      return requestInstance<unknown>(
      {url: `/v1/tags/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getTagsServiceDeleteTagsMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof tagsServiceDeleteTags>>, TError,{id: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof tagsServiceDeleteTags>>, TError,{id: string}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof tagsServiceDeleteTags>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  tagsServiceDeleteTags(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type TagsServiceDeleteTagsMutationResult = NonNullable<Awaited<ReturnType<typeof tagsServiceDeleteTags>>>
    
    export type TagsServiceDeleteTagsMutationError = ErrorType<unknown>

    export const useTagsServiceDeleteTags = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof tagsServiceDeleteTags>>, TError,{id: string}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof tagsServiceDeleteTags>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getTagsServiceDeleteTagsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const authServiceToken = (
    
 signal?: AbortSignal
) => {
      
      
      return requestInstance<AuthV1TokenResponse>(
      {url: `/v1/token`, method: 'POST', signal
    },
      );
    }
  


export const getAuthServiceTokenMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authServiceToken>>, TError,void, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof authServiceToken>>, TError,void, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof authServiceToken>>, void> = () => {
          

          return  authServiceToken()
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AuthServiceTokenMutationResult = NonNullable<Awaited<ReturnType<typeof authServiceToken>>>
    
    export type AuthServiceTokenMutationError = ErrorType<unknown>

    export const useAuthServiceToken = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authServiceToken>>, TError,void, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof authServiceToken>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getAuthServiceTokenMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
